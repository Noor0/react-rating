{"version":3,"file":"react-rating.umd.min.js","sources":["../src/utils/style.js","../src/RatingSymbol.js","../src/Rating.js","../src/utils/noop.js","../src/RatingAPILayer.js"],"sourcesContent":["var style = {\n  display: 'inline-block',\n  borderRadius: '50%',\n  border: '5px double white',\n  width: 30,\n  height: 30\n};\n\nexport default {\n  empty: {\n    ...style,\n    backgroundColor: '#ccc'\n  },\n  full: {\n    ...style,\n    backgroundColor: 'black'\n  },\n  placeholder: {\n    ...style,\n    backgroundColor: 'red'\n  }\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Return the corresponding React node for an icon.\nconst _iconNode = (icon) => {\n  // If it is already a React Element just return it.\n  if (React.isValidElement(icon)) {\n    return icon;\n  }\n  // If it is an object, try to use it as a CSS style object.\n  if (typeof icon === 'object' && icon !== null) {\n    return <span style={icon} />;\n  }\n  // If it is a string, use it as class names.\n  if (Object.prototype.toString.call(icon) === '[object String]') {\n    return <span className={icon} />;\n  }\n};\n\nclass RatingSymbol extends React.PureComponent {\n  render() {\n    const {\n      index,\n      inactiveIcon,\n      activeIcon,\n      percent,\n      direction,\n      readonly,\n      onClick\n    } = this.props;\n    const backgroundNode = _iconNode(inactiveIcon);\n    const showbgIcon = percent < 100;\n    const bgIconContainerStyle = showbgIcon\n      ? {}\n      : {\n          visibility: 'hidden'\n        };\n    const iconNode = _iconNode(activeIcon);\n    const iconContainerStyle = {\n      display: 'inline-block',\n      position: 'absolute',\n      overflow: 'hidden',\n      top: 0,\n      [direction === 'rtl' ? 'right' : 'left']: 0,\n      width: `${percent}%`\n    };\n    const style = {\n      cursor: !readonly ? 'pointer' : 'inherit',\n      display: 'inline-block',\n      position: 'relative'\n    };\n\n\n    function handleMouseClick(e) {\n      if (onClick) {\n        // [Supporting both TouchEvent and MouseEvent](https://developer.mozilla.org/en-US/docs/Web/API/Touch_events/Supporting_both_TouchEvent_and_MouseEvent)\n        // We must prevent firing click event twice on touch devices.\n        e.preventDefault();\n        onClick(index, e);\n      }\n    }\n\n    return (\n      <span\n        style={style}\n        onClick={handleMouseClick}\n      >\n        <span style={bgIconContainerStyle}>\n          {backgroundNode}\n        </span>\n        <span style={iconContainerStyle}>\n          {iconNode}\n        </span>\n      </span>\n    );\n  }\n}\n\n// Define propTypes only in development. They will be void in production.\nRatingSymbol.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  index: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  inactiveIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  activeIcon: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.element\n  ]).isRequired,\n  percent: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  onClick: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onTouchMove: PropTypes.func,\n  onTouchEnd: PropTypes.func\n};\n\nexport default RatingSymbol;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Symbol from './RatingSymbol';\n\nclass Rating extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Indicates the value that is displayed to the user in the form of symbols.\n      // It can be either 0 (for no displayed symbols) or (0, end]\n      displayValue: this.props.value,\n      // Indicates if the user is currently hovering over the rating element\n      interacting: false\n    };\n    this.symbolClick = this.symbolClick.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const valueChanged = this.props.value !== nextProps.value;\n    this.setState((prevState) => ({\n      displayValue: valueChanged ? nextProps.value : prevState.displayValue\n    }));\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // Ignore state update due to value changed from props.\n    // Usually originated through an onClick event.\n    if (prevProps.value !== this.props.value) {\n      return;\n    }\n\n    // When hover ends, call this.props.onHover with no value.\n    // if (prevState.interacting && !this.state.interacting) {\n    //   return this.props.onHover();\n    // }\n\n    // When hover over.\n    // if (this.state.interacting) {\n    //   this.props.onHover(this.state.displayValue);\n    // }\n  }\n\n  symbolClick(symbolIndex, event) {\n    const value = this.calculateDisplayValue(symbolIndex, event);\n    this.props.onClick(value, event);\n  }\n\n  calculateDisplayValue(symbolIndex, event) {\n    const percentage = this.calculateHoverPercentage(event);\n    // Get the closest top fraction.\n    const fraction = Math.ceil(percentage % 1 * this.props.fractions) / this.props.fractions;\n    // Truncate decimal trying to avoid float precission issues.\n    const precision = 10 ** 3;\n    const displayValue =\n      symbolIndex + (Math.floor(percentage) + Math.floor(fraction * precision) / precision);\n    // ensure the returned value is greater than 0 and lower than totalSymbols\n    return displayValue > 0 ? displayValue > this.props.totalSymbols ? this.props.totalSymbols : displayValue : 1 / this.props.fractions;\n  }\n\n  calculateHoverPercentage(event) {\n    const clientX = event.nativeEvent.type.indexOf(\"touch\") > -1\n      ? event.nativeEvent.type.indexOf(\"touchend\") > -1\n        ? event.changedTouches[0].clientX\n        : event.touches[0].clientX\n      : event.clientX;\n\n    const targetRect = event.target.getBoundingClientRect();\n    const delta = this.props.direction === 'rtl'\n      ? targetRect.right - clientX\n      : clientX - targetRect.left;\n\n    // Returning 0 if the delta is negative solves the flickering issue\n    return delta < 0 ? 0 : delta / targetRect.width;\n  }\n\n  render() {\n    const {\n      readonly,\n      quiet,\n      totalSymbols,\n      value,\n      placeholderValue,\n      direction,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      className,\n      id,\n      style,\n      tabIndex\n    } = this.props;\n    const { displayValue, interacting } = this.state;\n    const symbolNodes = [];\n    const empty = [].concat(emptySymbol);\n    const full = [].concat(fullSymbol);\n    const placeholder = [].concat(placeholderSymbol);\n    const shouldDisplayPlaceholder =\n      placeholderValue !== 0 &&\n      value === 0 &&\n      !interacting;\n\n    // The value that will be used as base for calculating how to render the symbols\n    let renderedValue;\n    if (shouldDisplayPlaceholder) {\n      renderedValue = placeholderValue;\n    } else {\n      renderedValue = quiet ? value : displayValue;\n    }\n\n    // The amount of full symbols\n    const fullSymbols = Math.floor(renderedValue);\n\n    for (let i = 0; i < totalSymbols; i++) {\n      let percent;\n      // Calculate each symbol's fullness percentage\n      if (i - fullSymbols < 0) {\n        percent = 100;\n      } else if (i - fullSymbols === 0) {\n        percent = (renderedValue - i) * 100;\n      } else {\n        percent = 0;\n      }\n\n      symbolNodes.push(\n        <Symbol\n          key={i}\n          index={i}\n          readonly={readonly}\n          inactiveIcon={empty[i % empty.length]}\n          activeIcon={\n            shouldDisplayPlaceholder ? placeholder[i % full.length] : full[i % full.length]\n          }\n          percent={percent}\n          direction={direction}\n          {...(!readonly && {\n            onClick: this.symbolClick,\n          })}\n        />\n      );\n    }\n\n    return (\n      <span\n        id={id}\n        style={{...style, display: 'inline-block', direction }}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        {...(!readonly && {\n          // onMouseLeave: this.onMouseLeave\n        })}\n      >\n        {symbolNodes}\n      </span>\n    );\n  }\n}\n\n// Define propTypes only in development.\nRating.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  totalSymbols: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired, // Always >= 0\n  placeholderValue: PropTypes.number.isRequired,\n  readonly: PropTypes.bool.isRequired,\n  quiet: PropTypes.bool.isRequired,\n  fractions: PropTypes.number.isRequired,\n  direction: PropTypes.string.isRequired,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]).isRequired,\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onClick: PropTypes.func.isRequired,\n  // onHover: PropTypes.func.isRequired\n};\n\nexport default Rating;\n","function noop() {}\nnoop._name = 'react_rating_noop';\n\nexport default noop;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Style from './utils/style';\nimport Rating from './Rating';\nimport noop from './utils/noop';\n\nclass RatingAPILayer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.initialRating\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    this.setState({\n      value: nextProps.initialRating\n    });\n  }\n\n  handleClick(value, e) {\n    const newValue = this.translateDisplayValueToValue(value);\n    this.props.onClick(newValue);\n    // Avoid calling setState if not necessary. Micro optimisation.\n    if (this.state.value !== newValue) {\n      // If we have a new value trigger onChange callback.\n      this.setState({\n        value: newValue\n      }, () => this.props.onChange(this.state.value));\n    }\n  }\n\n  translateDisplayValueToValue(displayValue) {\n    const translatedValue = displayValue * this.props.step + this.props.start;\n    // minimum value cannot be equal to start, since it's exclusive\n    return translatedValue === this.props.start\n      ? translatedValue + 1 / this.props.fractions\n      : translatedValue;\n  }\n\n  tranlateValueToDisplayValue(value) {\n    if (value === undefined) {\n      return 0;\n    }\n    return (value - this.props.start) / this.props.step;\n  }\n\n  render() {\n    const {\n      step,\n      emptySymbol,\n      fullSymbol,\n      placeholderSymbol,\n      readonly,\n      quiet,\n      fractions,\n      direction,\n      start,\n      stop,\n      id,\n      className,\n      style,\n      tabIndex\n    } = this.props;\n\n    function calculateTotalSymbols(start, stop, step) {\n      return Math.floor((stop - start) / step);\n    }\n\n    return (\n      <Rating\n        id={id}\n        style={style}\n        className={className}\n        tabIndex={tabIndex}\n        aria-label={this.props['aria-label']}\n        totalSymbols={calculateTotalSymbols(start, stop, step)}\n        value={this.tranlateValueToDisplayValue(this.state.value)}\n        placeholderValue={this.tranlateValueToDisplayValue(this.props.placeholderRating)}\n        readonly={readonly}\n        quiet={quiet}\n        fractions={fractions}\n        direction={direction}\n        emptySymbol={emptySymbol}\n        fullSymbol={fullSymbol}\n        placeholderSymbol={placeholderSymbol}\n        onClick={this.handleClick}\n      />\n    );\n  }\n}\n\nRatingAPILayer.defaultProps = {\n  start: 0,\n  stop: 5,\n  step: 1,\n  readonly: false,\n  quiet: false,\n  fractions: 1,\n  direction: 'ltr',\n  onHover: noop,\n  onClick: noop,\n  onChange: noop,\n  emptySymbol: Style.empty,\n  fullSymbol: Style.full,\n  placeholderSymbol: Style.placeholder\n};\n\n// Define propTypes only in development.\nRatingAPILayer.propTypes = typeof __DEV__ !== 'undefined' && __DEV__ && {\n  start: PropTypes.number,\n  stop: PropTypes.number,\n  step: PropTypes.number,\n  initialRating: PropTypes.number,\n  placeholderRating: PropTypes.number,\n  readonly: PropTypes.bool,\n  quiet: PropTypes.bool,\n  fractions: PropTypes.number,\n  direction: PropTypes.string,\n  emptySymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  fullSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  placeholderSymbol: PropTypes.oneOfType([\n    // Array of class names and/or style objects.\n    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.element])),\n    // Class names.\n    PropTypes.string,\n    // Style objects.\n    PropTypes.object,\n    // React element\n    PropTypes.element\n  ]),\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onChange: PropTypes.func\n};\n\nexport default RatingAPILayer;\n"],"names":["style","display","borderRadius","border","width","height","empty","backgroundColor","full","placeholder","_iconNode","icon","React","isValidElement","_typeof","Object","prototype","toString","call","className","RatingSymbol","PureComponent","this","props","index","inactiveIcon","activeIcon","percent","direction","readonly","onClick","backgroundNode","bgIconContainerStyle","visibility","iconNode","iconContainerStyle","position","overflow","top","cursor","e","preventDefault","Rating","state","displayValue","_this","value","interacting","symbolClick","bind","nextProps","valueChanged","setState","prevState","prevProps","symbolIndex","event","calculateDisplayValue","percentage","calculateHoverPercentage","fraction","Math","ceil","fractions","precision","floor","totalSymbols","clientX","nativeEvent","type","indexOf","changedTouches","touches","targetRect","target","getBoundingClientRect","delta","right","left","renderedValue","quiet","placeholderValue","emptySymbol","fullSymbol","placeholderSymbol","id","tabIndex","symbolNodes","concat","shouldDisplayPlaceholder","fullSymbols","i","push","_Symbol","key","length","noop","_name","RatingAPILayer","initialRating","handleClick","newValue","translateDisplayValueToValue","_this2","onChange","translatedValue","step","start","undefined","stop","calculateTotalSymbols","tranlateValueToDisplayValue","placeholderRating","defaultProps","onHover","Style"],"mappings":"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"}